{"version":3,"sources":["components/ColorModeSwitcher.tsx","components/Start.tsx","components/WordsInput.tsx","components/WordsList.tsx","components/Practice.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","position","zIndex","top","right","size","fontSize","variant","color","onClick","icon","aria-label","Start","start","minH","textAlign","mx","spacing","fontWeight","colorScheme","px","WordsInput","addWord","useState","word","setWord","toast","useToast","mt","onSubmit","e","preventDefault","trim","title","status","duration","isClosable","maxW","autoFocus","placeholder","value","onChange","target","type","WordsList","words","deleteWord","length","divider","borderWidth","borderRadius","borderColor","p","w","alignItems","map","content","id","Practice","finish","currentWord","setCurrentWord","flexDirection","justifyContent","h","isDisabled","leftIcon","App","started","setStarted","practice","setPractice","setWords","in","unmountOnExit","newWord","uuidv4","newWords","filter","i","j","Math","floor","random","aux","shuffle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","initialColorMode","theme","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5bb00e68.chunk.js","sourcesContent":["import React from \"react\";\nimport { useColorMode, useColorModeValue, IconButton } from \"@chakra-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\n// Botón para cambiar el tema de la app\nconst ColorModeSwitcher = () => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      position=\"absolute\"\n      zIndex=\"3\"\n      top=\"3\"\n      right=\"3\"\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n    />\n  );\n};\n\nexport default ColorModeSwitcher;\n","import React from \"react\";\r\nimport { Text, VStack, Heading, Center, Button } from \"@chakra-ui/react\";\r\n\r\n// Props del componente\r\ninterface Props {\r\n  start: () => void;\r\n}\r\n\r\n// Pantalla de inicio de la app\r\nconst Start = ({ start }: Props) => {\r\n  return (\r\n    <Center minH=\"100vh\">\r\n      <VStack textAlign=\"center\" mx=\"10\" spacing=\"5\">\r\n        <Heading fontWeight=\"bold\" size=\"2xl\">\r\n          Shuffle and Practice!\r\n        </Heading>\r\n        <Text fontSize=\"md\">\r\n          Write a list of words or topics, shuffle them and practice!\r\n        </Text>\r\n        <Button variant=\"solid\" colorScheme=\"purple\" px=\"10\" onClick={start}>\r\n          Start\r\n        </Button>\r\n      </VStack>\r\n    </Center>\r\n  );\r\n};\r\n\r\nexport default Start;\r\n","import React, { ChangeEvent, FormEvent, useState } from \"react\";\r\nimport {\r\n  VStack,\r\n  Heading,\r\n  Button,\r\n  HStack,\r\n  Input,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\n\r\n// Props del componente\r\ninterface Props {\r\n  addWord: (word: string) => void;\r\n}\r\n\r\n// Input y botón para agregar palabras o temas\r\nconst WordsInput = ({ addWord }: Props) => {\r\n  // Estados\r\n  const [word, setWord] = useState(\"\");\r\n  const toast = useToast();\r\n\r\n  // Submit del form\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    // En caso de que esté vacío\r\n    if (word.trim() === \"\") {\r\n      toast({\r\n        title: \"Please write a word or a topic\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n\r\n    addWord(word.trim());\r\n    setWord(\"\");\r\n  };\r\n\r\n  // Cambio de texto en el input\r\n  const handleChangeText = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setWord(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <VStack textAlign=\"center\" spacing=\"6\">\r\n      {/* Título */}\r\n      <Heading mt=\"45\" fontWeight=\"bold\" size=\"xl\">\r\n        Shuffle and Practice!\r\n      </Heading>\r\n      {/* Form */}\r\n      <form onSubmit={handleSubmit}>\r\n        <HStack maxW=\"md\">\r\n          {/* Input */}\r\n          <Input\r\n            autoFocus\r\n            variant=\"filled\"\r\n            placeholder=\"Write a word or a topic\"\r\n            value={word}\r\n            onChange={handleChangeText}\r\n          />\r\n          {/* Botón */}\r\n          <Button colorScheme=\"purple\" px=\"10\" type=\"submit\">\r\n            Add\r\n          </Button>\r\n        </HStack>\r\n      </form>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default WordsInput;\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Text,\r\n  VStack,\r\n  HStack,\r\n  Spacer,\r\n  IconButton,\r\n  StackDivider,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport { FaTrash } from \"react-icons/fa\";\r\nimport { Word } from \"../App\";\r\n\r\n// Props del componente\r\ninterface Props {\r\n  words: Word[];\r\n  deleteWord: (id: string) => void;\r\n}\r\n\r\n// Lista de palabras o temas agregados\r\nconst WordsList = ({ words, deleteWord }: Props) => {\r\n  // Color dependiendo del tema\r\n  const color = useColorModeValue(\"purple.500\", \"purple.200\");\r\n\r\n  // Si aún no se agregan palabras o temas\r\n  if (!words.length) {\r\n    return (\r\n      <Box>\r\n        <Text>Add some words or topics to practice!</Text>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <VStack\r\n      divider={<StackDivider />}\r\n      borderWidth=\"2px\"\r\n      borderRadius=\"md\"\r\n      borderColor={color}\r\n      p=\"5\"\r\n      w=\"100%\"\r\n      maxW=\"xl\"\r\n      alignItems=\"stretch\"\r\n    >\r\n      {words.map((word) => (\r\n        <HStack key={word.id}>\r\n          <Text>{word.content}</Text>\r\n          <Spacer />\r\n          <IconButton\r\n            icon={<FaTrash />}\r\n            color={color}\r\n            aria-label=\"Delete\"\r\n            onClick={() => deleteWord(word.id)}\r\n          />\r\n        </HStack>\r\n      ))}\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default WordsList;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Center,\r\n  Button,\r\n  Alert,\r\n  AlertDescription,\r\n  IconButton,\r\n  Spacer,\r\n} from \"@chakra-ui/react\";\r\nimport { FaArrowLeft, FaArrowRight, FaCheckCircle } from \"react-icons/fa\";\r\nimport { Word } from \"../App\";\r\n\r\n// Props del componente\r\ninterface Props {\r\n  words: Word[];\r\n  finish: () => void;\r\n}\r\n\r\n// Componente para practicar las palabras o temas\r\nconst Practice = ({ words, finish }: Props) => {\r\n  const [currentWord, setCurrentWord] = useState(0);\r\n\r\n  return (\r\n    <Center flexDirection=\"column\" minH=\"100vh\" p=\"6\">\r\n      <Alert\r\n        variant=\"solid\"\r\n        colorScheme=\"purple\"\r\n        textAlign=\"center\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        w=\"100%\"\r\n        maxW=\"md\"\r\n        h=\"40\"\r\n        borderRadius=\"md\"\r\n        fontSize=\"xl\"\r\n      >\r\n        <IconButton\r\n          colorScheme=\"purple\"\r\n          icon={<FaArrowLeft />}\r\n          aria-label=\"Previous\"\r\n          onClick={() => setCurrentWord(currentWord - 1)}\r\n          isDisabled={currentWord === 0}\r\n        />\r\n        <Spacer />\r\n        <AlertDescription>{words[currentWord].content}</AlertDescription>\r\n        <Spacer />\r\n        <IconButton\r\n          colorScheme=\"purple\"\r\n          icon={<FaArrowRight />}\r\n          aria-label=\"Next\"\r\n          onClick={() => setCurrentWord(currentWord + 1)}\r\n          isDisabled={currentWord === words.length - 1}\r\n        />\r\n      </Alert>\r\n      <Button\r\n        mt=\"4\"\r\n        variant=\"solid\"\r\n        colorScheme=\"purple\"\r\n        px=\"10\"\r\n        leftIcon={<FaCheckCircle />}\r\n        onClick={finish}\r\n      >\r\n        Finish\r\n      </Button>\r\n    </Center>\r\n  );\r\n};\r\n\r\nexport default Practice;\r\n","import React, { useState } from \"react\";\nimport { Box, VStack, Button, Fade } from \"@chakra-ui/react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ColorModeSwitcher from \"./components/ColorModeSwitcher\";\nimport Start from \"./components/Start\";\nimport WordsInput from \"./components/WordsInput\";\nimport WordsList from \"./components/WordsList\";\nimport Practice from \"./components/Practice\";\n\n// Palabra o tema\nexport interface Word {\n  id: string;\n  content: string;\n}\n\nexport const App = () => {\n  // Estados\n  const [started, setStarted] = useState(false);\n  const [practice, setPractice] = useState(false);\n  const [words, setWords] = useState<Word[]>([]);\n\n  // Agregar una palabra o tema a la lista\n  const addWord = (word: string) => {\n    const newWord: Word = {\n      id: uuidv4(), // Id único\n      content: word,\n    };\n\n    setWords([...words, newWord]);\n  };\n\n  // Borrar una palabra o tema de la lista\n  const deleteWord = (id: string) => {\n    const newWords: Word[] = words.filter((word) => word.id !== id);\n\n    setWords(newWords);\n  };\n\n  // Revolver las palabras o temas de la lista\n  const shuffle = () => {\n    const newWords = [...words];\n\n    for (let i = 0; i < newWords.length; i++) {\n      // Genera un entero aleatorio\n      let j = Math.floor(Math.random() * newWords.length);\n      // Hace el intercambio\n      let aux = newWords[i];\n      newWords[i] = newWords[j];\n      newWords[j] = aux;\n    }\n\n    setWords(newWords);\n  };\n\n  // OnClick al botón de shuffle para iniciar la práctica\n  const handleShuffleClick = () => {\n    shuffle();\n    setStarted(false);\n    setPractice(true);\n  };\n\n  // Terminar la práctica\n  const finish = () => {\n    setWords([]);\n    setPractice(false);\n  };\n\n  return (\n    <Box>\n      {/* Botón para cambiar el tema */}\n      <ColorModeSwitcher />\n      {/* Transición a iniciar la app */}\n      <Fade in={started} unmountOnExit>\n        {/* Pantalla para crear la lista */}\n        <VStack p=\"6\" spacing=\"6\">\n          <WordsInput addWord={addWord} />\n          <WordsList words={words} deleteWord={deleteWord} />\n          <Button\n            isDisabled={!words.length}\n            variant=\"solid\"\n            colorScheme=\"purple\"\n            px=\"10\"\n            onClick={handleShuffleClick}\n          >\n            Shuffle\n          </Button>\n        </VStack>\n      </Fade>\n      {/* Transición para iniciar la práctica */}\n      <Fade in={practice} unmountOnExit>\n        {/* Práctica */}\n        <Practice words={words} finish={finish} />\n      </Fade>\n      {/* Pantalla de inicio de la app */}\n      {!started && !practice && <Start start={() => setStarted(true)} />}\n    </Box>\n  );\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript, ChakraProvider, theme } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode=\"system\" />\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}